/* Off canvas
==========
*/

.off-canvas-nav-bar {
	@include mq(alpha-and-beta) {
		background: map-get($off-canvas, bg-color);
		position: fixed;
		z-index: 9999;
		top: 0;
		width: rem(map-get($off-canvas, width));
		height: 100%;

		&--left {
			left: 0;
			transform: translate3d(-#{map-get($off-canvas, width)}, 0, 0);
			transition: transform map-get($base, transition-speed);

			.off-canvas-show-left & {
				transform: translate3d(0, 0, 0);
			}

			.no-csstransforms3d & {
				left: -#{map-get($off-canvas, width)};
			}

			.no-csstransforms3d.off-canvas-show-left & {
				left: 0;
			}
		}

		&--right {
			right: 0;
			transform: translate3d(map-get($off-canvas, width), 0, 0);
			transition: transform map-get($base, transition-speed);

			.off-canvas-show-right & {
				transform: translate3d(0, 0, 0);
			}

			.no-csstransforms3d & {
				right: -#{map-get($off-canvas, width)};
			}

			.no-csstransforms3d.off-canvas-show-left & {
				right: 0;
			}
		}
	}

	@include mq(gamma-and-up) {
		background: map-get($nav-bar, bg-color);
		width: 100%;
		min-width: rem(map-get($container, min-width));
		max-height: 100%;
		overflow-y: auto;
		z-index: 999;
		transition: all map-get($base, transition-speed);
		text-align: center;

		.csspositionsticky & {
			position: sticky;
			top: 0;
			left: 0;
		}

		.no-csspositionsticky & {
			position: relative;
		}

		@include mq(gamma-and-up) {
			max-height: inherit;
			text-align: left;
		}

		.logo {
			display: inline-block;
			margin-bottom: -6px;
			padding-top: rem(12px);
			min-height: rem(map-get($nav-bar, trigger-height));

			@include mq(gamma-and-up) {
				float: left;
				padding-top: 0;
				min-height: inherit;
				margin-top: rem(18px);
				margin-bottom: 0;
			}
		}

		&--transform {
			transform: translate3d(0, -100%, 0);

			&.nav-bar--show {
				transform: translate3d(0, 0, 0);
			}

			&.nav-bar--always-show-on-mobile {
				@include mq(alpha) {
					transform: translate3d(0, 0, 0);
				}
			}
		}

		&--transparent {
			&:not(.nav-bar--fixed) {
				@include mq(gamma-and-up) {
					background: transparent;

					.nav-bar__link {
						color: black;

						&.nav-bar__link--active,
						&.scrollspy-nav--active,
						&:hover {
							background: transparent;
							color: map-get($color, beta);
						}
					}

					.nav-bar--transparent & {
						color: map-get($nav-bar, link-color);
					}
				}
			}
		}

		&--fixed {
			.no-csspositionsticky & {
				position: fixed;
				top: 0;
				left: 0;
			}
		}

		&__container {
			margin-left: map-get($container, margin-left);
			margin-right: map-get($container, margin-right);
			min-width: rem(map-get($container, min-width));
			max-width: rem(map-get($container, max-width));

			@include mq(gamma-and-up) {
				padding-left: rem(map-get($container, padding)*4);
				padding-right: rem(map-get($container, padding)*4);
			}
		}

		&__nav {
			@include mq(gamma-and-up) {
				@if map-get($nav-bar, nav-position) == left {
					float: left;
				} @else {
					float: right;
				}
				
				margin-left: rem(map-get($nav-bar, nav-margin-left));
			}
		}

		&__list {
			clear: both;
			border-top: rem(1px) solid lighten(map-get($nav-bar, bg-color), 10%);
			max-height: 0;
			overflow: hidden;
			transition: all map-get($base, transition-speed);

			@include mq(gamma-and-up) {
				overflow: inherit;
				max-height: inherit;
				float: right;
				border-top: 0;
			}

			.nav-bar--mobile-show & {
				max-height: rem(800px);
			}

			li {
				display: block;
				margin: 0;

				@include mq(gamma-and-up) {
					display: inline-block;
					margin-right: -4px;
				}
			}
		}

		&__link {
			display: block;
			color: map-get($nav-bar, link-color);
			text-align: map-get($nav-bar, link-text-align);
			padding: rem(map-get($nav-bar, link-padding-vertical)) rem(map-get($nav-bar, link-padding-horizontal));

			@include mq(gamma-and-up) {
				display: inline-block;
			}

			&:hover {
				background: lighten(map-get($nav-bar, bg-color), 10%);
				color: map-get($nav-bar, link-color);
			}

			&.nav-bar__link--active,
			&.scrollspy-nav--active {
				background: map-get($color, beta);
				color: map-get($nav-bar, link-color);
			}

		}
	}
}

.off-canvas-nar-bar,
.off-canvas-nar-bar__container,
.off-canvas-nar-bar__nav,
.off-canvas-nar-bar__list,
.off-canvas-nar-bar__link {
	@extend .clearfix;
}

.off-canvas-nar-bar__list {
	@extend .list-inline;
}

.off-canvas-nav-bar__item {
	@include mq(alpha-and-beta) {
		border-top: rem(1px) solid map-get($off-canvas, item-border-top-color);
		border-bottom: rem(1px) solid map-get($off-canvas, item-border-bottom-color);

		&:first-child {
			border-top: 0;
		}

		&:last-child {
			border-bottom: 0;
		}
	}
}

.off-canvas-nav-bar__link {
	@include mq(alpha-and-beta) {
		display: block;
		color: map-get($off-canvas, link-color);
		padding: rem(map-get($off-canvas, link-padding-vertical)) rem(map-get($off-canvas, link-padding-horizontal));

		&.active,
		&:hover,
		&.scrollspy-nav--active {
			background: lighten(map-get($off-canvas, bg-color), 3%);
		}
	}
}
