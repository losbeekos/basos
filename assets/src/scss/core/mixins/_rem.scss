/* Rem
==========
*/

@mixin rem($property, $values, $important: false) {
    // Create a couple of empty lists as output buffers.
    $rem-values: ();

    // Loop through the $values list
    @each $value in $values {
        // For each property value, if it's in rem or px, derive both rem and
        // px values for it and add those to the end of the appropriate buffer.
        // Ensure all pixel values are rounded to the nearest pixel.
        @if $value == 0 or $value == 0px {
            // 0 -- use it without a unit
            $rem-values: join($rem-values, 0);
        } @else if type-of($value) == number and not unitless($value) and (unit($value) == px) {
            // px value given - calculate rem value from base-font-size
            $new-rem-value: $value / map-get($base, font-size);
            $rem-values: join($rem-values, #{$new-rem-value}rem);
        } @else {
            // unitless value - use those directly as rem and calculate the px-fallback
            $rem-values: join($rem-values, #{$value}rem);
        }
    }

    // output the converted rules
    @if ($important == true) {
        #{$property}: $rem-values !important;
    } @else {
        #{$property}: $rem-values;
    }
}