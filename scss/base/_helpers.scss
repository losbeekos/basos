/*=====================================
=            Helper mixins            =
=====================================*/


/*==========  REM  ==========*/
// Source: https://github.com/bitmanic/rem
// Baseline, measured in pixels
// The value should be the same as the font-size value for the html element
// If the html element's font-size is set to 62.5% (of the browser's default font-size of 16px),
// then the variable below would be 10px.

@mixin rem($property, $px-values) {
    // Convert the baseline into rems
    $baseline-rem: $base-font-size / 1rem * 1;
    // Print the first line in pixel values
    #{$property}: $px-values;
    // If there is only one (numeric) value, return the property/value line for it.
    @if type-of($px-values) == "number" {
        #{$property}: $px-values / $baseline-rem;
    } @else {
        // Create an empty list that we can dump values into
        $rem-values: ();
        @each $value in $px-values {// If the value is zero or not a number, return it
            @if $value == 0 or type-of( $value ) != "number" {
                $rem-values: append($rem-values, $value);
            } @else {
                $rem-values: append($rem-values, $value / $baseline-rem);
            }
        }
        // Return the property and its list of converted values
        #{$property}: $rem-values;
    }
}


/*==========  Breakpoints  ==========*/

@mixin breakpoint($point) {
  @if $point == gamma-and-up {
    @media (min-width: 900px) { @content; }
  }

  @else if $point == beta {
    @media (min-width: 650px) and (max-width: 900px) { @content; }
  }

  @else if $point == beta-and-up {
    @media (min-width: 650px) { @content; }
  }

  @else if $point == alpha {
    @media (max-width: 650px)  { @content; }
  }
}


/*==========  Triangle  ==========*/
// @param width           :  px, em
// @param height          :  px, em
// @param direction       :  up, down, left, right
// @param color           :  hex, rgb

@mixin arrow($width: 20px, $height: 20px, $direction: up, $color: red) {
    width: 0;
    height: 0;

    // Right
    @if($direction == right) {
        border-top: $height/2 solid transparent;
        border-bottom: $height/2 solid transparent;
        border-left: $width solid $color;
    }

    // Left
    @if($direction == left) {
        border-top: $height/2 solid transparent;
        border-bottom: $height/2 solid transparent;
        border-right: $width solid $color;
    }

    // Up
    @if($direction == up) {
        border-left: $width/2 solid transparent;
        border-right: $width/2 solid transparent;
        border-bottom: $height solid $color;
    }

    // Down
    @if($direction == down) {
        border-left: $width/2 solid transparent;
        border-right: $width/2 solid transparent;
        border-top: $height solid $color;
    }
}


/*==========  Animation  ==========*/

@mixin animation($name, $duration, $direction, $function) {
    -webkit-animation: $name $duration $direction $function;
    -moz-animation: $name $duration $direction $function;
    animation: $name $duration $direction $function;
}


/*======================================
=            Helper classes            =
======================================*/


/*==========  Unstyled list  ==========*/

.list-unstyled {
    margin: 0;
    padding: 0;
    list-style-type: none;
}


/*==========  Inline list  ==========*/

.list-inline {
    @extend .list-unstyled;

    li {
        display: inline;
        @include rem(margin-right, 10px);
    }
}


/*==========  Image replacement  ==========*/

%ir {
    background-color: transparent;
    border: 0;
    overflow: hidden;

    &:before {
        content: '';
        display: block;
        width: 0;
        height: 150%;
    }
}


/*==========  Clearfix  ==========*/

.clearfix {
    &:before,
    &:after {
        content: '';
        display: table;
    }

    &:after {
        clear: both;
    }
}


/*==========  Visually hidden  ==========*/

.visuallyhidden {
    border: 0;
    clip: rect(0 0 0 0);
    height: 1px;
    margin: -1px;
    overflow: hidden;
    padding: 0;
    position: absolute;
    width: 1px;
}

.visuallyhidden.focusable:active,
.visuallyhidden.focusable:focus {
    clip: auto;
    height: auto;
    margin: 0;
    overflow: visible;
    position: static;
    width: auto;
}

/*==========  Hide classes  ==========*/

@include breakpoint(alpha) {
    .hide-alpha,
    .hide-alpha-and-beta {
        border: 0;
        clip: rect(0 0 0 0);
        height: 1px;
        margin: -1px;
        overflow: hidden;
        padding: 0;
        position: absolute;
        width: 1px;
    }
}

@include breakpoint(beta) {
    .hide-beta,
    .hide-alpha-and-beta {
        border: 0;
        clip: rect(0 0 0 0);
        height: 1px;
        margin: -1px;
        overflow: hidden;
        padding: 0;
        position: absolute;
        width: 1px;
    }
}

.show-screenreaders {
    @extend .visuallyhidden;
}


/*==========  No webkit flickr  ==========*/

.no-webkit-flicker {
    -webkit-transform:translate3d(0, 0, 0);
}
